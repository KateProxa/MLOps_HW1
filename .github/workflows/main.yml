name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build_docker_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Clear Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache
          key: ${{ runner.os }}-cache  
          restore-keys: |
            ${{ runner.os }}-cache
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            KateProxa/MLOps_HW1:${{ github.sha }}
            KateProxa/MLOps_HW1:latest

  lint_and_format_code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Clear Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache
          key: ${{ runner.os }}-cache
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black[jupyter]
      - name: Run linter
        run: flake8 . --exclude=setup.py
      - name: Check code formatting
        run: black . --exclude=setup.py

  publish_package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Clear Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache
          key: ${{ runner.os }}-cache
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Clean old artifacts
        run: rm -rf dist/
      - name: Build package
        run: |
          python setup.py sdist bdist_wheel
      - name: Upload to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          twine upload --repository testpypi dist/* --verbose
      - name: Upload to PyPI
        if: startsWith(github.event.release.tag_name, 'v')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload --repository pypi dist/*

  build_docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Quarto
        run: |
          sudo apt-get install quarto 

      - name: Generate documentation from EDA.ipynb to HTML
        run: |
          quarto render EDA.ipynb --to html 
          
      - name: Move documentation to public directory for GitHub Pages 
        run: |
          mkdir -p public && mv EDA.html public/

      - name: Upload documentation as artifact 
        if : success()
        uses : actions/upload-artifact@v3 
        with :
           name : docs 
           path : public/
